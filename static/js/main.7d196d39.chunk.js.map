{"version":3,"sources":["reducer/addTaskReducer.js","context/AddTaskContext/AddTaskContext.jsx","reducer/taskReducer.js","context/taskContext.js","context/themeContext.jsx","component/DisplayTodo/Task/Task.jsx","UI/modal/Modal.jsx","component/AddTask/AddTask.jsx","component/DisplayTodo/DisplayTodo.jsx","component/Notification/Notification.js","component/FinishedTasks/TaskFinised.jsx","component/FinishedTasks/FinishedTasks.jsx","App.js","reportWebVitals.js","index.js"],"names":["addTaskReducer","state","action","type","Error","AddTaskContext","createContext","AddTaskContextProvider","children","useReducer","show","dispatch","Provider","value","taskReducer","title","task","description","id","uuid","newState","filter","localStorage","setItem","JSON","stringify","completedTasks","map","completed","TaskContext","init","storageData","parse","getItem","length","TaskContextProvider","tasks","ThemeContext","ThemeContextProvider","useState","isLightTheme","setIsLightTheme","useEffect","theme","light","toggleTheme","prevState","Task","taskItem","useContext","isChecked","setIsChecked","iconTheme","join","contentTheme","className","checked","onChange","style","width","onClick","Modal","AddTask","dispactcher","setTask","ButtonTheme","htmlFor","name","placeholder","maxLength","e","target","newStorageData","preventDefault","storageJson","push","DisplayTodo","InfoTheme","ItemTheme","index","Notification","TaskFinished","padding","FinishedTask","finishedTask","setFinihedTask","infoTheme","storedTask","App","backgroundTheme","navTheme","toggleThemeController","FinishedTasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d196d39.chunk.js","sourcesContent":["export const addTaskReducer = (state, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase \"ADD_TASK\":\r\n\t\t\treturn true;\r\n\t\tcase \"CLOSE_TASK\":\r\n\t\t\treturn false;\r\n\t\tdefault:\r\n\t\t\tthrow new Error();\r\n\t}\r\n};\r\n","import React, {createContext, useReducer} from 'react'\r\nimport { addTaskReducer } from '../../reducer/addTaskReducer';\r\n\r\nexport const AddTaskContext = createContext()\r\n\r\nconst AddTaskContextProvider = ({children}) => {\r\n    const [show, dispatch] = useReducer(addTaskReducer ,false);\r\n\r\n \r\n    return (\r\n        <AddTaskContext.Provider value={{show, dispatch}}>\r\n            {children}\r\n        </AddTaskContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AddTaskContextProvider\r\n","import uuid from \"react-uuid\";\r\n\r\nexport const taskReducer = (state, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase \"ADD_TODO\":\r\n\t\t\treturn [\r\n\t\t\t\t...state,\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: action.task.title,\r\n\t\t\t\t\tdescription: action.task.description,\r\n\t\t\t\t\tid: uuid(),\r\n\t\t\t\t},\r\n\t\t\t];\r\n\r\n\t\tcase \"DELETE_TODO\":\r\n\t\t\tconst newState = state.filter((task) => task.id !== action.id);\r\n\t\t\tlocalStorage.setItem(\"dis_task\", JSON.stringify(newState));\r\n\t\t\treturn newState;\r\n\r\n\t\tcase \"COMPLETE_TASK\":\r\n\t\t\tconst completedTasks = state.map((task) =>\r\n\t\t\t\ttask.id === action.id ? { ...task, completed: !task.completed } : task\r\n\t\t\t);\r\n\t\t\tlocalStorage.setItem(\"dis_task\", JSON.stringify(completedTasks));\r\n\t\t\treturn completedTasks;\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport { taskReducer } from \"../reducer/taskReducer\";\r\n\r\nexport const TaskContext = createContext();\r\n\r\nconst init = () => {\r\n\tconst storageData = JSON.parse(localStorage.getItem(\"dis_task\"));\r\n\tif (storageData) {\r\n\t\tif (storageData.length > 0) {\r\n\t\t\treturn storageData;\r\n\t\t}\r\n\t}\r\n\treturn [];\r\n};\r\n\r\nconst TaskContextProvider = ({ children }) => {\r\n\tconst [tasks, dispatch] = useReducer(taskReducer, [], init);\r\n\treturn (\r\n\t\t<TaskContext.Provider value={{ tasks, dispatch }}>\r\n\t\t\t{children}\r\n\t\t</TaskContext.Provider>\r\n\t);\r\n};\r\n\r\nexport default TaskContextProvider;\r\n","import React, { createContext, useEffect, useState } from \"react\";\r\n\r\nexport const ThemeContext = createContext();\r\n\r\n\r\nconst ThemeContextProvider = ({ children }) => {\r\n    let [isLightTheme, setIsLightTheme] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const theme = JSON.parse(localStorage.getItem('dis_todo_theme'))\r\n        if (theme) {\r\n            if (theme.light) {\r\n                setIsLightTheme(true)\r\n            } else {\r\n                setIsLightTheme(false)\r\n            }\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        localStorage.setItem('dis_todo_theme', JSON.stringify({ light: isLightTheme }))\r\n    }, [isLightTheme])\r\n\r\n    const toggleTheme = () => {\r\n        setIsLightTheme(prevState => isLightTheme = !prevState)\r\n\r\n    }\r\n\r\n    return (\r\n        <ThemeContext.Provider value={{ isLightTheme, toggleTheme }}>\r\n            {children}\r\n        </ThemeContext.Provider>\r\n    )\r\n}\r\n\r\nexport default ThemeContextProvider\r\n","import React, { useContext, useState } from \"react\";\r\nimport { FaTrash } from \"react-icons/fa\";\r\nimport { TaskContext } from \"../../../context/taskContext\";\r\nimport { ThemeContext } from \"../../../context/themeContext\";\r\n\r\nconst Task = ({ taskItem }) => {\r\n\tconst { dispatch } = useContext(TaskContext);\r\n\tconst [isChecked, setIsChecked] = useState(taskItem.completed ? true : false)\r\n\r\n\tconst toggleCheckbox = () => {\r\n\t\tsetIsChecked(\r\n\t\t\tisChecked => isChecked = !isChecked\r\n\t\t)\r\n\r\n\t\tdispatch({ type: 'COMPLETE_TASK', id: taskItem.id })\r\n\t}\r\n\r\n\tconst { isLightTheme } = useContext(ThemeContext);\r\n\tconst iconTheme = isLightTheme ? \"icon\" : [\"icon\", \"dark\"].join(\" \");\r\n\tconst contentTheme = isLightTheme ? \"list-content\" : [\"list-content\", \"dark\"].join(\" \");\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<li className={contentTheme}>\r\n\r\n\t\t\t\t<input type='checkbox' checked={isChecked} onChange={toggleCheckbox} />\r\n\t\t\t\t<div style={{ width: '100%' }}>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<h5>{taskItem.title}</h5>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<p>{taskItem.description}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<FaTrash\r\n\t\t\t\t\t\tclassName={iconTheme}\r\n\t\t\t\t\t\tonClick={() => dispatch({ type: \"DELETE_TODO\", id: taskItem.id })}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</li>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Task;\r\n","import React, { useContext } from 'react'\r\nimport { AddTaskContext } from '../../context/AddTaskContext/AddTaskContext'\r\n\r\n\r\nconst Modal = ({children}) => {\r\n    const {dispatch} = useContext(AddTaskContext)\r\n    return (\r\n        <>\r\n            <div className=\"backdrop\"  onClick={()=>dispatch({type:'CLOSE_TASK'})}></div>\r\n            <div className=\"modal\">\r\n                {children}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Modal\r\n","import React, { useContext, useState } from 'react'\r\nimport { AddTaskContext } from '../../context/AddTaskContext/AddTaskContext'\r\nimport { TaskContext } from '../../context/taskContext'\r\nimport { ThemeContext } from '../../context/themeContext'\r\nimport uuid from \"react-uuid\";\r\n\r\nconst AddTask = () => {\r\n    const { dispatch } = useContext(TaskContext)\r\n    const { dispatch: dispactcher } = useContext(AddTaskContext)\r\n    const [task, setTask] = useState({ title: '', description: '' })\r\n    const { isLightTheme } = useContext(ThemeContext);\r\n    const ButtonTheme = isLightTheme ? \"button\" : [\"button\", \"dark\"].join(\" \");\r\n\r\n    const handleTitlechange = (e) => {\r\n        setTask({ ...task, title: e.target.value })\r\n    }\r\n    const handleDescriptionchange = (e) => {\r\n        setTask({ ...task, description: e.target.value })\r\n    }\r\n    const handleSumit = e => {\r\n        let newStorageData = [];\r\n\r\n        e.preventDefault();\r\n        if (task.title && task.description) {\r\n            dispatch({\r\n                type: 'ADD_TODO',\r\n                task: {\r\n                    title: task.title,\r\n                    description: task.description,\r\n\r\n                }\r\n            })\r\n            const storageJson = localStorage.getItem('dis_task')\r\n            if (storageJson) {\r\n                const storageData = JSON.parse(storageJson)\r\n                newStorageData = [...storageData]\r\n                newStorageData.push({\r\n                    title: task.title,\r\n                    description: task.description,\r\n                    id: uuid()\r\n                })\r\n\r\n            } else {\r\n                newStorageData.push({\r\n                    title: task.title,\r\n                    description: task.description,\r\n                    id: uuid()\r\n                })\r\n            }\r\n            localStorage.setItem('dis_task', JSON.stringify(newStorageData))\r\n\r\n            setTask({ title: '', description: '' })\r\n            dispactcher({ type: 'CLOSE_TASK' })\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <form className='form'>\r\n                <div className=\"field\">\r\n                    <label htmlFor=\"title\">title</label>\r\n                    <input\r\n                        type='text'\r\n                        name='title'\r\n                        placeholder='Enter Title'\r\n                        maxLength='15'\r\n                        value={task.title}\r\n                        onChange={handleTitlechange} />\r\n                </div>\r\n                <div className=\"field\">\r\n                    <label htmlFor=\"description\">description</label>\r\n                    <textarea placeholder='Enter info' value={task.description}\r\n                        onChange={handleDescriptionchange} maxLength='36' ></textarea>\r\n                </div>\r\n                <button className={ButtonTheme} type='submit' onClick={handleSumit}>submit</button>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddTask\r\n","import React, { useContext } from 'react'\r\nimport { AddTaskContext } from '../../context/AddTaskContext/AddTaskContext'\r\nimport { TaskContext } from '../../context/taskContext'\r\nimport Task from './Task/Task'\r\nimport Modal from '../../UI/modal/Modal'\r\nimport AddTask from '../AddTask/AddTask'\r\nimport { ThemeContext } from '../../context/themeContext'\r\n\r\nconst DisplayTodo = () => {\r\n    const {tasks} = useContext(TaskContext)\r\n    const {show, dispatch}= useContext(AddTaskContext)\r\n    const { isLightTheme } = useContext(ThemeContext);\r\n\tconst theme = isLightTheme\r\n\t\t? \"all-task\"\r\n\t\t: [\"all-task\", \"dark\"].join(\" \");\r\n    const ButtonTheme = isLightTheme\r\n\t\t? \"button\"\r\n\t\t: [\"button\", \"dark\"].join(\" \");\r\n\r\n        const InfoTheme = isLightTheme\r\n\t\t? \"info\"\r\n\t\t: [\"info\", \"dark\"].join(\" \");\r\n\r\n    \r\nconst ItemTheme = isLightTheme\r\n\t\t? \"item\"\r\n\t\t: [\"item\", \"dark\"].join(\" \");\r\n\r\n    return (\r\n        <div className={theme}>\r\n            <ul className={ItemTheme}>\r\n                    {tasks.length? (\r\n                        tasks.map((task, index) => <Task taskItem={task} key={index}/>)) : (\r\n                        <li className={InfoTheme}>\r\n                            You don't have any set-tasks currently, kindly click on the <span className='uppercase'>add task</span> button to add a task\r\n                            </li>)}\r\n            </ul>\r\n            <button className={ButtonTheme} onClick={()=>dispatch({type:'ADD_TASK'})}> add task</button>\r\n            {show && \r\n            (<Modal>\r\n\t\t\t    <AddTask />\r\n\t\t\t</Modal>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayTodo\r\n","import React, { useContext } from \"react\";\r\nimport { TaskContext } from \"../../context/taskContext\";\r\nimport { ThemeContext } from \"../../context/themeContext\";\r\nimport \"./../../App.css\";\r\n\r\nconst Notification = () => {\r\n\tconst { tasks } = useContext(TaskContext);\r\n\tconst { isLightTheme } = useContext(ThemeContext);\r\n\tconst theme = isLightTheme\r\n\t\t? \"notification\"\r\n\t\t: [\"notification\", \"dark\"].join(\" \");\r\n\r\n\tconst completedTasks = tasks.filter((task) => task.completed === true);\r\n\r\n\treturn (\r\n\t\t<div className={theme}>\r\n\t\t\t{tasks.length === 0 ? (\r\n\t\t\t\t<p>you have no task currently.</p>\r\n\t\t\t) : (\r\n\t\t\t\t<p>\r\n\t\t\t\t\tyou have a total of <span>{tasks.length}</span> tasks currently and{\" \"}\r\n\t\t\t\t\t<span>{completedTasks.length}</span> tasks completed.\r\n\t\t\t\t</p>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useContext } from 'react'\r\nimport { FaCheck } from \"react-icons/fa\";\r\nimport { ThemeContext } from '../../context/themeContext';\r\nconst TaskFinished = ({task}) => {\r\n\t const { isLightTheme } = useContext(ThemeContext);\r\n\tconst theme = isLightTheme ? \"taskfinished\" : [\"taskfinished\", \"dark\"].join(\" \");\r\n    return (\r\n        <div>\r\n            <li className={theme}>\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t<div style={{width:'100%', padding:5}}>\r\n\t\t\t\t\t<h5>{task.title}</h5>\r\n\t\t\t\t\t<p>{task.description}</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<FaCheck className=\"finishedicon\" />\r\n\t\t\t\t\r\n\t\t\t</li>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskFinished\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport { TaskContext } from '../../context/taskContext'\r\nimport { ThemeContext } from '../../context/themeContext'\r\nimport TaskFinished from './TaskFinised'\r\n\r\n\r\nconst FinishedTask = (id) => {\r\n    const { tasks } = useContext(TaskContext)\r\n    const [finishedTask, setFinihedTask] = useState([])\r\n\r\n    const { isLightTheme } = useContext(ThemeContext);\r\n    const theme = isLightTheme ? \"finished\" : [\"finished\", \"dark\"].join(\" \");\r\n    const infoTheme = isLightTheme ? \"info\" : [\"info\", \"dark\"].join(\" \");\r\n\r\n    useEffect(() => {\r\n        const storedTask = JSON.parse(localStorage.getItem('dis_task'))\r\n        if (storedTask) {\r\n            if (storedTask.length > 0) {\r\n                setFinihedTask(storedTask.filter(task => task.completed === true))\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setFinihedTask(tasks.filter(task => task.completed === true))\r\n    }, [tasks])\r\n\r\n    return (\r\n        <>\r\n            <ul className={theme}>\r\n                {finishedTask.length > 0 ? finishedTask.map((task, index) => <TaskFinished key={index} task={task} />) : (\r\n                    <li className={infoTheme}>no completed task to display</li>\r\n                )}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FinishedTask\r\n","import \"./App.css\";\nimport DisplayTodo from \"./component/DisplayTodo/DisplayTodo\";\nimport Notification from \"./component/Notification/Notification\";\nimport AddTaskContextProvider from \"./context/AddTaskContext/AddTaskContext\";\nimport TaskContextProvider from \"./context/taskContext\";\nimport FinishedTasks from \"./component/FinishedTasks/FinishedTasks\";\nimport React, { useContext } from \"react\";\nimport { ThemeContext } from \"./context/themeContext\";\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n\nfunction App() {\n\tconst { isLightTheme, toggleTheme } = useContext(ThemeContext);\n\tconst backgroundTheme = isLightTheme ? \"background\" : \"background dark\";\n\tconst theme = isLightTheme ? \"App\" : [\"App\", \"dark\"].join(\" \");\n\tconst navTheme = isLightTheme ? \"nav\" : [\"nav\", \"dark\"].join(\" \");\n\tconst iconTheme = isLightTheme ? \"icon\" : [\"icon\", \"dark\"].join(\" \");\n\tconst toggleThemeController = isLightTheme\n\t\t? \"toggle\"\n\t\t: [\"toggle\", \"dark\"].join(\" \");\n\treturn (\n\t\t<>\n\t\t\t<div className={backgroundTheme}></div>\n\t\t\t<div className={theme}>\n\t\t\t\t<div className={navTheme}>\n\t\t\t\t\t<div className=\"logo\">\n\t\t\t\t\t\t<h1>Doingz App</h1>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={toggleThemeController}>\n\t\t\t\t\t\t{isLightTheme ? (\n\t\t\t\t\t\t\t<FaSun className={iconTheme} onClick={() => toggleTheme()} />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<FaMoon className={iconTheme} onClick={() => toggleTheme()} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<TaskContextProvider>\n\t\t\t\t\t<Notification />\n\t\t\t\t\t<AddTaskContextProvider>\n\t\t\t\t\t\t<DisplayTodo />\n\t\t\t\t\t</AddTaskContextProvider>\n\n\t\t\t\t\t<FinishedTasks />\n\t\t\t\t</TaskContextProvider>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport ThemeContextProvider from \"./context/themeContext\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<ThemeContextProvider>\n\t\t\t<App />\n\t\t</ThemeContextProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}